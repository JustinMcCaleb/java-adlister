package models;

import com.mysql.cj.jdbc.Driver;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MySQLAdsDao implements Ads{

    //creating private instance property to be set in constructor and then used in methods
    private Connection connection;

    public MySQLAdsDao(Config config) {
        try {
            //creating a new driver (program that translates between Java and the database server) using the static method registerDriver from the DriverManager class
            DriverManager.registerDriver(new Driver());

            //attempts to establish a connection to the given database URL, using the user and password passed in
            connection = DriverManager.getConnection(
                    config.getUrl(),
                    config.getUser(),
                    config.getPassword()
            );
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<Ad> all() {
        List<Ad> allAds = new ArrayList<>();

        String adsQuery = "SELECT * FROM ads";

        try {
            //"Statement statement =" is the Interface Statement that creates an object (with createStatement() ) used for executing a static SQL statement and returning the results it produces (ResultSet)
            Statement statement = connection.createStatement();

            //ResultSet returns a table of data representing a database result set, which is usually generated by executing a statement that queries the database. A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The next method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object,
            ResultSet rs = statement.executeQuery(adsQuery);

            //while loop that uses the boolean return of rs.next() to loop through the result set and add ads until the result set cursor hits the last row and returns false
            while(rs.next()) {
                allAds.add(new Ad(
                        rs.getLong("id"),
                        rs.getLong("user_id"),
                        rs.getString("title"),
                        rs.getString("description")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return allAds;
    }

    @Override
    public Long insert(Ad ad) {

        long lastAdId = 0;

        try {
            Statement statement = connection.createStatement();

            statement.executeUpdate(insertAdQuery(ad), Statement.RETURN_GENERATED_KEYS);
            ResultSet generatedKeys = statement.getGeneratedKeys();

            if(generatedKeys.next()) {
                lastAdId = generatedKeys.getLong(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return lastAdId;
    }

    private String insertAdQuery(Ad ad) {
        return "INSERT INTO ads(user_id, title, description) VALUES "
                + "(" + ad.getUserId() + ", "
                + "'" + ad.getTitle() +"', "
                + "'" + ad.getDescription() + "')";
    }
}
